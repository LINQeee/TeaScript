class TS{static templates={};static addTemplate=(e,t)=>{this.templates.hasOwnProperty(e)||(this.templates[e]=t)};static initializeTemplate=async(e,...t)=>{if(!this.templates.hasOwnProperty(e))throw Error(`Template ${e} does not exist`);return this.fromHTML(await this.templates[e](...t))};static initializeHTMLTemplate=(e,...t)=>{let r=this.templates[e](...t);return TS.isPromise(r)&&r.then(e=>r=e),r};static replace=(e,t,r,a)=>{if(!a)return e.replace(t,r);let s=RegExp(t,"ig");return e.replace(s,r)};static replaceAll=(e,t,r,a)=>{if(!a)return e.replaceAll(t,r);let s=RegExp(t,"ig");return e.replaceAll(s,r)};static uniqueReplace=(e,t,r,a)=>{if(!a){let s=RegExp(`(?<!\\w)${t}(?!\\w)`,"g");return e.replace(s,r)}let i=RegExp(`(?<!\\w)${t}(?!\\w)`,"ig");return e.replace(i,r)};static uniqueReplaceAll=(e,t,r,a)=>{if(!a){let s=RegExp(`(?<!\\w)${t}(?!\\w)`,"g");return e.replaceAll(s,r)}let i=RegExp(`(?<!\\w)${t}(?!\\w)`,"ig");return e.replaceAll(i,r)};static fromHTML=(e,t=!0)=>{if(!(e=t?e:e.trim()))return null;let r=document.createElement("template");return r.innerHTML=e,r.content.children[0]};static toHTML=e=>e.outerHTML.trim();static q=e=>document.querySelector(e);static qAll=e=>document.querySelectorAll(e);static param=function e(t){let r=window.location.search.substring(1).split("&"),a,s;for(s=0;s<r.length;s++)if((a=r[s].split("="))[0]===t)return void 0===a[1]||decodeURIComponent(a[1]);return!1};static str=e=>JSON.stringify(e.replace(/'/g,'"')).replace(/"/g,"'");static obj=e=>JSON.stringify(e=this.removeQuotes(e)).replace(/"/g,"'");static removeQuotes=e=>{let t={};return Object.keys(e).forEach(r=>{let a=e[r],s=a;"object"==typeof a?s=this.removeQuotes(a):"string"==typeof a&&(s=a.replace(/'/g,'"')),t[r]=s}),t};static createInterval=(e,t,...r)=>(e(),setInterval(e,t,...r));static isPromise=e=>e&&"[object Promise]"===Object.prototype.toString.call(e)}class Template{constructor(e,t){TS.addTemplate(e,t)}}new Template("SysError",e=>`<div style="min-height: 100vh; display: flex; align-items: center; justify-content: center; background: #171717; color: #fff; border-radius: 5px; font-size: 20px">${e}</div>`);class TSDate{static formatDate=(e,t)=>(t=formatYear(e,t),t=formatHour(e,t),t=formatDay(e,t),t=formatMinute(e,t),t=formatSecond(e,t),t=formatMonth(e,t),t=formatWeekDay(e,t))}const formatYear=(e,t)=>(t=TS.uniqueReplaceAll(t,"yyyy",e.getFullYear(),!0),t=TS.uniqueReplaceAll(t,"yy",e.toLocaleDateString("default",{year:"2-digit"}),!0)),formatHour=(e,t)=>(t=TS.uniqueReplaceAll(t,"hh12",e.toLocaleTimeString("default",{hour:"2-digit",hour12:!0}).replace(" ",""),!0),t=TS.uniqueReplaceAll(t,"hh",convertTwoDigit(e.getHours()),!0),t=TS.uniqueReplaceAll(t,"h12",e.toLocaleTimeString("default",{hour:"numeric",hour12:!0}).replace(" ",""),!0),t=TS.uniqueReplaceAll(t,"h",e.getHours(),!0)),formatMonth=(e,t)=>(t=TS.uniqueReplaceAll(t,"MMMM",e.toLocaleDateString("default",{month:"long"})),t=TS.uniqueReplaceAll(t,"MMM",e.toLocaleDateString("default",{month:"short"})),t=TS.uniqueReplaceAll(t,"MM",convertTwoDigit(e.getMonth()+1)),t=TS.uniqueReplaceAll(t,"M",e.toLocaleDateString("default",{month:"numeric"}))),formatDay=(e,t)=>(t=TS.uniqueReplaceAll(t,"dd",convertTwoDigit(e.getDate()),!0),t=TS.uniqueReplaceAll(t,"d",e.getDate(),!0)),formatWeekDay=(e,t)=>(t=TS.uniqueReplaceAll(t,"wwww",e.toLocaleDateString("default",{weekday:"long"}),!0),t=TS.uniqueReplaceAll(t,"www",e.toLocaleDateString("default",{weekday:"short"}),!0),t=TS.uniqueReplaceAll(t,"ww",e.toLocaleDateString("default",{weekday:"narrow"}),!0),t=TS.uniqueReplaceAll(t,"w",e.getDay(),!0)),formatMinute=(e,t)=>(t=TS.uniqueReplaceAll(t,"mm",convertTwoDigit(e.getMinutes())),t=TS.uniqueReplaceAll(t,"m",e.getMinutes())),formatSecond=(e,t)=>(t=TS.uniqueReplaceAll(t,"ss",convertTwoDigit(e.getSeconds()),!0),t=TS.uniqueReplaceAll(t,"s",e.getSeconds(),!0)),convertTwoDigit=e=>(10>+e&&(e="0"+e),e);class TSNavigator{paths={};history=[];constructor(e){this.paths=e;let t=TS.param("page");if(!t||!this.paths.hasOwnProperty(t)){TS.initializeTemplate("SysError","Page not found: 404").then(e=>document.body.appendChild(e));return}TS.initializeTemplate(this.paths[t][0],this.paths[t][1]).then(e=>document.body.appendChild(e)),this.history.push(t)}goToPage=(e,t=!0,...r)=>{TS.qAll("body > :not(script)").forEach(e=>e.remove()),TS.initializeTemplate(this.paths[e],...r).then(e=>document.body.appendChild(e)),t&&this.history.push(e)};goBack=async(e=!0)=>{e&&this.history.length>1&&this.history.pop();let t;await this.goToPage(this.history[t=1===this.history.length?0:e?this.history.length-1:this.history.length-2],!e)}}class TSQuery{static METHOD={GET:"GET",HEAD:"HEAD",POST:"POST",PUT:"PUT",DELETE:"DELETE",CONNECT:"CONNECT",OPTIONS:"OPTIONS",TRACE:"TRACE",PATCH:"PATCH"};static STATUS={ERROR:"ERROR",SUCCESS:"SUCCESS"};constructor(...e){this.middlewares=[DefaultMiddleware],e&&(this.middlewares=[...this.middlewares,...e])}refetchRequest=async(e,t,r,a,s,i)=>{let l=async()=>{let{result:t,error:l,status:o}=await this.send(r,a,{...s,cacheEnabled:!1},i);e.result=t,e.error=l,e.status=o},o=TS.createInterval(l,t);return()=>clearInterval(o)};send=async(e,t,r,a)=>{let s=!!r&&r.cacheEnabled;r={...r,method:t,body:a,cacheEnabled:void 0};let i,l={requestUrl:e,request:this.send,requestMethod:t,requestBody:a,requestOptions:r},o=!!s&&getRequestFromCache(e,t,r,a);return o?i=o:(i=await this.fetch(e,r,l),this.callMiddlewares(l)),s&&await cacheRequest(e,t,r,a,i),i};fetch=async(e,t,r)=>{try{let a=await fetch(e,t);if(a.ok)return r.responseStatus=TSQuery.STATUS.SUCCESS,{result:await this.convertResponseToData(a),status:a.status};return r.responseStatus=TSQuery.STATUS.ERROR,r.error=await a.text(),{error:await a.text(),status:a.status}}catch(s){if(s instanceof TypeError)return r.responseStatus=TSQuery.STATUS.ERROR,r.error={message:"Network error"},{error:"Network error",status:0};if(!(s instanceof Response))return r.responseStatus=TSQuery.STATUS.ERROR,r.error="An error occurred",{error:"An error occurred",status:500};{let i=await this.convertResponseToData(s);return r.responseStatus=TSQuery.STATUS.ERROR,r.error=i,{error:i,status:s.status}}}};convertResponseToData=async e=>e.headers.get("Content-Type").includes("application/json")?await e.json():e.headers.get("Content-Type").includes("plain/text")?await e.text():void 0;callMiddlewares=e=>{this.middlewares.forEach(async t=>await t.call(e))}}class Middleware{constructor(e){this.call=e}}const cacheRequest=async(e,t,r,a,s)=>{let i=JSON.stringify({url:e,options:r,method:t,body:a});sessionStorage.getItem(i)||sessionStorage.setItem(i,JSON.stringify(s))},getRequestFromCache=(e,t,r,a)=>{let s=JSON.stringify({url:e,options:r,method:t,body:a});return JSON.parse(sessionStorage.getItem(s))},DefaultMiddleware=new Middleware(e=>{let t=TSDate.formatDate(new Date,"hh:mm:ss");e.responseStatus===TSQuery.STATUS.SUCCESS?console.log(`${e.requestMethod} request: ${e.requestUrl} - ${t}`):console.error(`ERROR ${e.requestMethod} request: ${e.requestUrl} ${t}`)});