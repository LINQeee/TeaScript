class TS {
  static templates = {};
  static addTemplate = (e, t) => {
    this.templates.hasOwnProperty(e) || (this.templates[e] = t);
  };
  static initializeTemplate = (e, ...t) => {
    if (!this.templates.hasOwnProperty(e))
      throw Error(`Template ${e} does not exist`);
    return this.fromHTML(this.templates[e](...t));
  };
  static initializeHTMLTemplate = (e, ...t) => this.templates[e](...t);
  static replace = (e, t, a, l) => {
    if (!l) return e.replace(t, a);
    let r = RegExp(t, "ig");
    return e.replace(r, a);
  };
  static replaceAll = (e, t, a, l) => {
    if (!l) return e.replaceAll(t, a);
    let r = RegExp(t, "ig");
    return e.replaceAll(r, a);
  };
  static uniqueReplace = (e, t, a, l) => {
    if (!l) {
      let r = RegExp(`(?<!\\w)${t}(?!\\w)`, "g");
      return e.replace(r, a);
    }
    let i = RegExp(`(?<!\\w)${t}(?!\\w)`, "ig");
    return e.replace(i, a);
  };
  static uniqueReplaceAll = (e, t, a, l) => {
    if (!l) {
      let r = RegExp(`(?<!\\w)${t}(?!\\w)`, "g");
      return e.replaceAll(r, a);
    }
    let i = RegExp(`(?<!\\w)${t}(?!\\w)`, "ig");
    return e.replaceAll(i, a);
  };
  static fromHTML = (e, t = !0) => {
    if (!(e = t ? e : e.trim())) return null;
    let a = document.createElement("template");
    return (a.innerHTML = e), a.content.children[0];
  };
  static toHTML = (e) => e.outerHTML.trim();
  static q = (e) => document.querySelector(e);
  static qAll = (e) => document.querySelectorAll(e);
  static param = function e(t) {
    let a = window.location.search.substring(1).split("&"),
      l,
      r;
    for (r = 0; r < a.length; r++)
      if ((l = a[r].split("="))[0] === t)
        return void 0 === l[1] || decodeURIComponent(l[1]);
    return !1;
  };
  static createInterval = (e, t, ...a) => (e(), setInterval(e, t, ...a));
}
class Template {
  constructor(e, t) {
    TS.addTemplate(e, t);
  }
}
class TSDate {
  static formatDate = (e, t) => (
    (t = formatYear(e, t)),
    (t = formatHour(e, t)),
    (t = formatDay(e, t)),
    (t = formatMinute(e, t)),
    (t = formatSecond(e, t)),
    (t = formatMonth(e, t)),
    (t = formatWeekDay(e, t))
  );
}
const formatYear = (e, t) => (
    (t = TS.uniqueReplaceAll(t, "yyyy", e.getFullYear(), !0)),
    (t = TS.uniqueReplaceAll(
      t,
      "yy",
      e.toLocaleDateString("default", { year: "2-digit" }),
      !0
    ))
  ),
  formatHour = (e, t) => (
    (t = TS.uniqueReplaceAll(
      t,
      "hh12",
      e
        .toLocaleTimeString("default", { hour: "2-digit", hour12: !0 })
        .replace(" ", ""),
      !0
    )),
    (t = TS.uniqueReplaceAll(t, "hh", convertTwoDigit(e.getHours()), !0)),
    (t = TS.uniqueReplaceAll(
      t,
      "h12",
      e
        .toLocaleTimeString("default", { hour: "numeric", hour12: !0 })
        .replace(" ", ""),
      !0
    )),
    (t = TS.uniqueReplaceAll(t, "h", e.getHours(), !0))
  ),
  formatMonth = (e, t) => (
    (t = TS.uniqueReplaceAll(
      t,
      "MMMM",
      e.toLocaleDateString("default", { month: "long" })
    )),
    (t = TS.uniqueReplaceAll(
      t,
      "MMM",
      e.toLocaleDateString("default", { month: "short" })
    )),
    (t = TS.uniqueReplaceAll(t, "MM", convertTwoDigit(e.getMonth()))),
    (t = TS.uniqueReplaceAll(
      t,
      "M",
      e.toLocaleDateString("default", { month: "numeric" })
    ))
  ),
  formatDay = (e, t) => (
    (t = TS.uniqueReplaceAll(t, "dd", convertTwoDigit(e.getDate()), !0)),
    (t = TS.uniqueReplaceAll(t, "d", e.getDate(), !0))
  ),
  formatWeekDay = (e, t) => (
    (t = TS.uniqueReplaceAll(
      t,
      "wwww",
      e.toLocaleDateString("default", { weekday: "long" }),
      !0
    )),
    (t = TS.uniqueReplaceAll(
      t,
      "www",
      e.toLocaleDateString("default", { weekday: "short" }),
      !0
    )),
    (t = TS.uniqueReplaceAll(
      t,
      "ww",
      e.toLocaleDateString("default", { weekday: "narrow" }),
      !0
    )),
    (t = TS.uniqueReplaceAll(t, "w", e.getDay(), !0))
  ),
  formatMinute = (e, t) => (
    (t = TS.uniqueReplaceAll(t, "mm", convertTwoDigit(e.getMinutes()))),
    (t = TS.uniqueReplaceAll(t, "m", e.getMinutes()))
  ),
  formatSecond = (e, t) => (
    (t = TS.uniqueReplaceAll(t, "ss", convertTwoDigit(e.getSeconds()), !0)),
    (t = TS.uniqueReplaceAll(t, "s", e.getSeconds(), !0))
  ),
  convertTwoDigit = (e) => (10 > +e && (e = "0" + e), e);
class TSNavigator {
  paths = {};
  history = [];
  constructor(e) {
    this.paths = e;
    let t = TS.param("page");
    if (!t || !this.paths.hasOwnProperty(t)) {
      document.body.appendChild(
        TS.initializeTemplate("SysError", "Page not found: 404")
      );
      return;
    }
    document.body.appendChild(TS.initializeTemplate(e[t])),
      this.history.push(t),
      console.log(this.history);
  }
  goToPage(e, t = !0) {
    TS.qAll("body > :not(script)").forEach((e) => e.remove()),
      document.body.appendChild(TS.initializeTemplate(this.paths[e])),
      t && this.history.push(e);
  }
  goBack(e = !0) {
    e && this.history.length > 1 && this.history.pop();
    let t;
    (t =
      1 === this.history.length
        ? 0
        : e
        ? this.history.length - 1
        : this.history.length - 2),
      this.goToPage(this.history[t], !e);
  }
}
class TSQuery {
  static METHOD = {
    GET: "GET",
    HEAD: "HEAD",
    POST: "POST",
    PUT: "PUT",
    DELETE: "DELETE",
    CONNECT: "CONNECT",
    OPTIONS: "OPTIONS",
    TRACE: "TRACE",
    PATCH: "PATCH",
  };
  static STATUS = { ERROR: "ERROR", SUCCESS: "SUCCESS" };
  constructor(e) {
    (this.middlewares = [DefaultMiddleware]),
      e && (this.middlewares = [...this.middlewares, e]);
  }
  refetchRequest = async (e, t, a, l, r, i) => {
    let s = async () => {
        let {
          result: t,
          error: s,
          status: o,
        } = await this.send(a, l, { ...r, cacheEnabled: !1 }, i);
        (e.result = t), (e.error = s), (e.status = o);
      },
      o = TS.createInterval(s, t),
      n = () => clearInterval(o);
    return n;
  };
  send = async (e, t, a, l) => {
    let r = a.cacheEnabled;
    a = { ...a, method: t, body: l, cacheEnabled: void 0 };
    let i,
      s = {
        requestUrl: e,
        request: this.send,
        requestMethod: t,
        requestBody: l,
        requestOptions: a,
      },
      o = !!r && getRequestFromCache(e, t, a, l);
    return (
      (i = o || (await this.fetch(e, a, s))),
      this.callMiddlewares(s),
      r && cacheRequest(e, t, a, l, i),
      i
    );
  };
  fetch = async (e, t, a) => {
    let l = await fetch(e, t);
    return l.ok
      ? ((a.responseStatus = TSQuery.STATUS.SUCCESS),
        { result: await this.convertResponseToData(l), status: l.status })
      : ((a.responseStatus = TSQuery.STATUS.ERROR),
        (a.error = await this.convertResponseToData(l)),
        { error: await this.convertResponseToData(l), status: l.status });
  };
  convertResponseToData = async (e) =>
    e.headers.get("Content-Type").includes("application/json")
      ? await e.json()
      : e.headers.get("Content-Type").includes("plain/text")
      ? await e.text()
      : void 0;
  callMiddlewares = (e) => {
    this.middlewares.forEach(async (t) => await t.call(e));
  };
}
class Middleware {
  constructor(e) {
    this.call = e;
  }
}
const cacheRequest = async (e, t, a, l, r) => {
    let i = JSON.stringify({ url: e, options: a, method: t, body: l });
    sessionStorage.getItem(i) || sessionStorage.setItem(i, JSON.stringify(r));
  },
  getRequestFromCache = (e, t, a, l) => {
    let r = JSON.stringify({ url: e, options: a, method: t, body: l });
    return JSON.parse(sessionStorage.getItem(r));
  },
  DefaultMiddleware = new Middleware((e) => {
    let t = TSDate.formatDate(new Date(), "hh:mm:ss");
    e.responseStatus === TSQuery.STATUS.SUCCESS
      ? console.log(`${e.requestMethod} request: ${e.requestUrl} - ${t}`)
      : console.log(`ERROR ${e.requestMethod} request: ${e.requestUrl} ${t}`);
  });
new Template(
  "SysError",
  (e) =>
    `<div style="min-height: 100vh; display: flex; align-items: center; justify-content: center; background: #171717; color: #fff; border-radius: 5px; font-size: 20px">${e}</div>`
);
